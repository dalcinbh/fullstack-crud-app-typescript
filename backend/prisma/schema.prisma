// Prisma Client Generator Configuration
// Generates TypeScript client code for database operations with full type safety
generator client {
    provider = "prisma-client-js"
}

// Database Connection Configuration
// Connects to MySQL database using environment variable for connection string
datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

// Project Model
// Represents the main project entity that serves as a container for tasks.
// Each project has metadata (name, description, dates) and can contain multiple tasks.
model Project {
    /// Unique identifier for the project, auto-generated by database
    id Int @id @default(autoincrement())

    /// Project name/title used for identification and display purposes
    name String

    /// Detailed description explaining the project's purpose and scope
    description String

    /// Date when the project officially starts or started
    startDate DateTime

    /// Timestamp when the project record was created in the database
    createdAt DateTime @default(now())

    /// Timestamp automatically updated whenever the project record is modified
    updatedAt DateTime @updatedAt

    /// One-to-many relationship: A project can have multiple tasks
    /// Tasks are automatically deleted when parent project is deleted (cascade)
    tasks Task[]
}

// Task Model
// Represents individual work items within a project context.
// Each task belongs to exactly one project and tracks completion status.
model Task {
    /// Unique identifier for the task, auto-generated by database
    id Int @id @default(autoincrement())

    /// Foreign key relationship to parent project with cascade delete
    /// When a project is deleted, all its tasks are automatically removed
    project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    /// Foreign key storing the ID of the project this task belongs to
    projectId Int

    /// Task title/name used for identification and display
    title String

    /// Detailed description of what needs to be accomplished in this task
    description String

    /// Deadline by which the task should be completed
    dueDate DateTime

    /// Completion status indicator - false for pending tasks, true for completed
    isCompleted Boolean @default(false)

    /// Timestamp when the task record was created in the database
    createdAt DateTime @default(now())

    /// Timestamp automatically updated whenever the task record is modified
    updatedAt DateTime @updatedAt
}
